package evswap.swp391to4.acceptance;

import com.fasterxml.jackson.databind.ObjectMapper;
import evswap.swp391to4.entity.*;
import evswap.swp391to4.repository.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureWebMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.context.WebApplicationContext;

import java.math.BigDecimal;
import java.time.Instant;
import java.time.temporal.ChronoUnit;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * User Scenario Tests - Test c√°c t√¨nh hu·ªëng s·ª≠ d·ª•ng th·ª±c t·∫ø
 * M√¥ ph·ªèng c√°c scenario ph·ª©c t·∫°p m√† ng∆∞·ªùi d√πng c√≥ th·ªÉ g·∫∑p ph·∫£i
 */
@SpringBootTest
@AutoConfigureWebMvc
@ActiveProfiles("test")
@Transactional
class UserScenarioTest {

    @Autowired
    private WebApplicationContext webApplicationContext;

    @Autowired
    private DriverRepository driverRepository;

    @Autowired
    private StationRepository stationRepository;

    @Autowired
    private VehicleRepository vehicleRepository;

    @Autowired
    private BatteryRepository batteryRepository;

    @Autowired
    private ReservationRepository reservationRepository;

    @Autowired
    private PaymentRepository paymentRepository;

    @Autowired
    private SwapTransactionRepository swapTransactionRepository;

    @Autowired
    private FeedbackRepository feedbackRepository;

    @Autowired
    private TicketSupportRepository ticketSupportRepository;

    @Autowired
    private ObjectMapper objectMapper;

    private MockMvc mockMvc;

    @BeforeEach
    void setUp() {
        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();
    }

    /**
     * Scenario 1: T√†i x·∫ø m·ªõi s·ª≠ d·ª•ng d·ªãch v·ª• l·∫ßn ƒë·∫ßu
     * - ƒêƒÉng k√Ω t√†i kho·∫£n
     * - X√°c th·ª±c email
     * - ƒêƒÉng k√Ω xe
     * - T√¨m hi·ªÉu v·ªÅ d·ªãch v·ª•
     * - ƒê·∫∑t l·ªãch th·ª≠ nghi·ªám
     */
    @Test
    void scenario_NewDriverFirstTimeUsage() throws Exception {
        System.out.println("üöó Scenario: New Driver First Time Usage");

        // Step 1: ƒêƒÉng k√Ω t√†i kho·∫£n
        String registrationRequest = """
                {
                    "email": "newbie@example.com",
                    "passwordHash": "password123",
                    "fullName": "Nguy·ªÖn VƒÉn M·ªõi",
                    "phone": "0123456789"
                }
                """;

        mockMvc.perform(post("/api/auth/register")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(registrationRequest))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.email").value("newbie@example.com"));

        Driver driver = driverRepository.findByEmail("newbie@example.com").orElse(null);
        assertThat(driver).isNotNull();

        // Step 2: X√°c th·ª±c email
        mockMvc.perform(post("/api/auth/verify-email")
                        .param("email", "newbie@example.com")
                        .param("otp", driver.getEmailOtp()))
                .andExpect(status().isOk());

        // Step 3: ƒêƒÉng k√Ω xe
        String vehicleRequest = """
                {
                    "driverId": %d,
                    "vin": "VIN_NEWBIE_001",
                    "plateNumber": "30A-NEWBIE",
                    "model": "VinFast VF8"
                }
                """.formatted(driver.getDriverId());

        mockMvc.perform(post("/api/vehicles")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(vehicleRequest))
                .andExpect(status().isCreated());

        // Step 4: T√¨m tr·∫°m g·∫ßn nh·∫•t
        Station station = Station.builder()
                .name("Newbie Station")
                .address("123 Newbie Street, District 1, HCMC")
                .latitude(new BigDecimal("10.7769"))
                .longitude(new BigDecimal("106.7009"))
                .status("active")
                .build();
        Station savedStation = stationRepository.save(station);

        mockMvc.perform(get("/api/stations/nearby")
                        .param("latitude", "10.7800")
                        .param("longitude", "106.7200")
                        .param("radius", "5"))
                .andExpect(status().isOk());

        // Step 6: ƒê·∫∑t l·ªãch th·ª≠ nghi·ªám
        String reservationRequest = """
                {
                    "driverId": %d,
                    "stationId": %d,
                    "reservedStart": "2024-12-31T10:00:00Z"
                }
                """.formatted(driver.getDriverId(), savedStation.getStationId());

        mockMvc.perform(post("/api/reservations")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(reservationRequest))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.status").value("pending"));

        System.out.println("‚úÖ New driver successfully completed first-time setup");
    }

    /**
     * Scenario 2: T√†i x·∫ø th∆∞·ªùng xuy√™n s·ª≠ d·ª•ng d·ªãch v·ª•
     * - ƒêƒÉng nh·∫≠p nhanh
     * - Xem l·ªãch s·ª≠ giao d·ªãch
     * - ƒê·∫∑t l·ªãch th∆∞·ªùng xuy√™n
     * - Thanh to√°n t·ª± ƒë·ªông
     */
    @Test
    void scenario_RegularDriverFrequentUsage() throws Exception {
        System.out.println("üîÑ Scenario: Regular Driver Frequent Usage");

        // Setup: T·∫°o t√†i x·∫ø th∆∞·ªùng xuy√™n v·ªõi l·ªãch s·ª≠
        Driver regularDriver = Driver.builder()
                .email("regular@example.com")
                .passwordHash("encoded_password")
                .fullName("T√†i X·∫ø Th∆∞·ªùng Xuy√™n")
                .phone("0123456789")
                .emailVerified(true)
                .createdAt(Instant.now().minus(30, ChronoUnit.DAYS))
                .build();
        Driver savedDriver = driverRepository.save(regularDriver);

        // T·∫°o xe
        Vehicle vehicle = Vehicle.builder()
                .driver(savedDriver)
                .vin("VIN_REGULAR_001")
                .plateNumber("30A-REGULAR")
                .model("VinFast VF8")
                .createdAt(Instant.now().minus(30, ChronoUnit.DAYS))
                .build();
        vehicleRepository.save(vehicle);

        // T·∫°o tr·∫°m
        Station station = Station.builder()
                .name("Regular Station")
                .address("123 Regular Street, District 1, HCMC")
                .latitude(new BigDecimal("10.7769"))
                .longitude(new BigDecimal("106.7009"))
                .status("active")
                .build();
        Station savedStation = stationRepository.save(station);

        // T·∫°o l·ªãch s·ª≠ giao d·ªãch (3 l·∫ßn ƒë·ªïi pin tr∆∞·ªõc ƒë√≥)
        for (int i = 1; i <= 3; i++) {
            Reservation reservation = Reservation.builder()
                    .driver(savedDriver)
                    .station(savedStation)
                    .reservedStart(Instant.now().minus(i * 7, ChronoUnit.DAYS))
                    .status("completed")
                    .createdAt(Instant.now().minus(i * 7 + 1, ChronoUnit.DAYS))
                    .qrNonce("qr_nonce_" + i)
                    .qrExpiresAt(Instant.now().minus(i * 7, ChronoUnit.DAYS).plus(3, ChronoUnit.HOURS))
                    .qrStatus("used")
                    .qrToken("qr_token_" + i)
                    .checkedInAt(Instant.now().minus(i * 7, ChronoUnit.DAYS))
                    .build();
            reservationRepository.save(reservation);

            Payment payment = Payment.builder()
                    .driver(savedDriver)
                    .reservation(reservation)
                    .amount(new BigDecimal("25000"))
                    .method("ewallet")
                    .status("succeed")
                    .paidAt(Instant.now().minus(i * 7, ChronoUnit.DAYS))
                    .currency("VND")
                    .providerTxnId("TXN_REGULAR_" + i)
                    .build();
            paymentRepository.save(payment);
        }

        // Step 1: ƒêƒÉng nh·∫≠p nhanh
        String loginRequest = """
                {
                    "email": "regular@example.com",
                    "password": "password123"
                }
                """;

        mockMvc.perform(post("/api/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(loginRequest))
                .andExpect(status().isOk());

        // Step 2: Xem l·ªãch s·ª≠ giao d·ªãch
        mockMvc.perform(get("/api/drivers/{id}/reservations", savedDriver.getDriverId()))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$.length()").value(3));

        // Step 3: ƒê·∫∑t l·ªãch m·ªõi (l·∫ßn th·ª© 4)
        String reservationRequest = """
                {
                    "driverId": %d,
                    "stationId": %d,
                    "reservedStart": "2024-12-31T10:00:00Z"
                }
                """.formatted(savedDriver.getDriverId(), savedStation.getStationId());

        mockMvc.perform(post("/api/reservations")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(reservationRequest))
                .andExpect(status().isCreated());

        // Step 4: Thanh to√°n t·ª± ƒë·ªông (s·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c ƒë√£ l∆∞u)
        Reservation newReservation = reservationRepository.findByDriver(savedDriver).stream()
                .filter(r -> r.getStatus().equals("pending"))
                .findFirst().orElse(null);
        assertThat(newReservation).isNotNull();

        String paymentRequest = """
                {
                    "driverId": %d,
                    "reservationId": %d,
                    "amount": 25000,
                    "method": "ewallet",
                    "currency": "VND"
                }
                """.formatted(savedDriver.getDriverId(), newReservation.getReservationId());

        mockMvc.perform(post("/api/payments")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(paymentRequest))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.method").value("ewallet"));

        System.out.println("‚úÖ Regular driver successfully completed frequent usage scenario");
    }

    /**
     * Scenario 3: T√†i x·∫ø g·∫∑p s·ª± c·ªë v√† c·∫ßn h·ªó tr·ª£
     * - ƒê·∫∑t l·ªãch th√†nh c√¥ng
     * - ƒê·∫øn tr·∫°m nh∆∞ng g·∫∑p s·ª± c·ªë
     * - G·ª≠i y√™u c·∫ßu h·ªó tr·ª£
     * - Nh·∫≠n h·ªó tr·ª£ t·ª´ staff
     * - Ho√†n th√†nh giao d·ªãch
     */
    @Test
    void scenario_DriverFacingIssuesAndSupport() throws Exception {
        System.out.println("üÜò Scenario: Driver Facing Issues and Support");

        // Setup: T·∫°o t√†i x·∫ø, tr·∫°m v√† staff
        Driver driver = Driver.builder()
                .email("support@example.com")
                .passwordHash("encoded_password")
                .fullName("T√†i X·∫ø C·∫ßn H·ªó Tr·ª£")
                .phone("0123456789")
                .emailVerified(true)
                .createdAt(Instant.now())
                .build();
        Driver savedDriver = driverRepository.save(driver);

        Station station = Station.builder()
                .name("Support Station")
                .address("123 Support Street, District 1, HCMC")
                .latitude(new BigDecimal("10.7769"))
                .longitude(new BigDecimal("106.7009"))
                .status("active")
                .build();
        Station savedStation = stationRepository.save(station);

        Staff staff = Staff.builder()
                .email("staff@support.com")
                .fullName("Nh√¢n Vi√™n H·ªó Tr·ª£")
                .station(savedStation)
                .passwordHash("encoded_password")
                .isActive(true)
                .build();
        // Note: StaffRepository would be needed

        // Step 1: ƒê·∫∑t l·ªãch th√†nh c√¥ng
        String reservationRequest = """
                {
                    "driverId": %d,
                    "stationId": %d,
                    "reservedStart": "2024-12-31T10:00:00Z"
                }
                """.formatted(savedDriver.getDriverId(), savedStation.getStationId());

        mockMvc.perform(post("/api/reservations")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(reservationRequest))
                .andExpect(status().isCreated());

        Reservation reservation = reservationRepository.findByDriver(savedDriver).stream()
                .findFirst().orElse(null);
        assertThat(reservation).isNotNull();

        // Step 2: Thanh to√°n
        String paymentRequest = """
                {
                    "driverId": %d,
                    "reservationId": %d,
                    "amount": 25000,
                    "method": "ewallet",
                    "currency": "VND"
                }
                """.formatted(savedDriver.getDriverId(), reservation.getReservationId());

        mockMvc.perform(post("/api/payments")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(paymentRequest))
                .andExpect(status().isCreated());

        // Step 3: ƒê·∫øn tr·∫°m v√† check-in
        reservation.setStatus("confirmed");
        reservation.setCheckedInAt(Instant.now());
        reservationRepository.save(reservation);

        // Step 4: G·∫∑p s·ª± c·ªë - g·ª≠i y√™u c·∫ßu h·ªó tr·ª£
        String supportRequest = """
                {
                    "driverId": %d,
                    "category": "station",
                    "comment": "M√°y ƒë·ªïi pin kh√¥ng ho·∫°t ƒë·ªông, c·∫ßn h·ªó tr·ª£ ngay"
                }
                """.formatted(savedDriver.getDriverId());

        mockMvc.perform(post("/api/support-tickets")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(supportRequest))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.status").value("open"));

        // Step 5: Staff x·ª≠ l√Ω y√™u c·∫ßu h·ªó tr·ª£
        TicketSupport ticket = ticketSupportRepository.findByDriver(savedDriver).stream()
                .findFirst().orElse(null);
        assertThat(ticket).isNotNull();

        // Simulate staff response
        ticket.setStatus("in_progress");
        ticket.setNote("ƒêang ki·ªÉm tra m√°y ƒë·ªïi pin, s·∫Ω kh·∫Øc ph·ª•c trong 10 ph√∫t");
        ticketSupportRepository.save(ticket);

        // Step 6: Kh·∫Øc ph·ª•c s·ª± c·ªë v√† ho√†n th√†nh giao d·ªãch
        ticket.setStatus("resolved");
        ticket.setResolvedAt(Instant.now());
        ticket.setNote("ƒê√£ kh·∫Øc ph·ª•c s·ª± c·ªë, m√°y ƒë·ªïi pin ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng");
        ticketSupportRepository.save(ticket);

        // T·∫°o pin ƒë·ªÉ ho√†n th√†nh giao d·ªãch
        Battery batteryOut = Battery.builder()
                .station(savedStation)
                .model("VinFast VF8 Battery")
                .state("full")
                .sohPercent(95)
                .socPercent(100)
                .build();
        Battery savedBatteryOut = batteryRepository.save(batteryOut);

        Battery batteryIn = Battery.builder()
                .station(savedStation)
                .model("VinFast VF8 Battery")
                .state("full")
                .sohPercent(98)
                .socPercent(100)
                .build();
        Battery savedBatteryIn = batteryRepository.save(batteryIn);

        // Ho√†n th√†nh ƒë·ªïi pin
        String swapRequest = """
                {
                    "reservationId": %d,
                    "stationId": %d,
                    "batteryOutId": %d,
                    "batteryInId": %d
                }
                """.formatted(reservation.getReservationId(), 
                            savedStation.getStationId(),
                            savedBatteryOut.getBatteryId(),
                            savedBatteryIn.getBatteryId());

        mockMvc.perform(post("/api/swap-transactions")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(swapRequest))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.result").value("success"));

        // Step 7: ƒê√°nh gi√° d·ªãch v·ª• h·ªó tr·ª£
        String feedbackRequest = """
                {
                    "driverId": %d,
                    "stationId": %d,
                    "rating": 4,
                    "comment": "G·∫∑p s·ª± c·ªë nh∆∞ng ƒë∆∞·ª£c h·ªó tr·ª£ nhanh ch√≥ng v√† hi·ªáu qu·∫£"
                }
                """.formatted(savedDriver.getDriverId(), savedStation.getStationId());

        mockMvc.perform(post("/api/feedback")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(feedbackRequest))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.rating").value(4));

        System.out.println("‚úÖ Driver successfully resolved issues with support");
    }

    /**
     * Scenario 4: T√†i x·∫ø h·ªßy l·ªãch v√† y√™u c·∫ßu ho√†n ti·ªÅn
     * - ƒê·∫∑t l·ªãch v√† thanh to√°n
     * - H·ªßy l·ªãch v√¨ l√Ω do c√° nh√¢n
     * - Y√™u c·∫ßu ho√†n ti·ªÅn
     * - Nh·∫≠n ho√†n ti·ªÅn
     */
    @Test
    void scenario_DriverCancellationAndRefund() throws Exception {
        System.out.println("‚ùå Scenario: Driver Cancellation and Refund");

        // Setup
        Driver driver = Driver.builder()
                .email("cancel@example.com")
                .passwordHash("encoded_password")
                .fullName("T√†i X·∫ø H·ªßy L·ªãch")
                .phone("0123456789")
                .emailVerified(true)
                .createdAt(Instant.now())
                .build();
        Driver savedDriver = driverRepository.save(driver);

        Station station = Station.builder()
                .name("Cancel Station")
                .address("123 Cancel Street, District 1, HCMC")
                .latitude(new BigDecimal("10.7769"))
                .longitude(new BigDecimal("106.7009"))
                .status("active")
                .build();
        Station savedStation = stationRepository.save(station);

        // Step 1: ƒê·∫∑t l·ªãch v√† thanh to√°n
        String reservationRequest = """
                {
                    "driverId": %d,
                    "stationId": %d,
                    "reservedStart": "2024-12-31T10:00:00Z"
                }
                """.formatted(savedDriver.getDriverId(), savedStation.getStationId());

        mockMvc.perform(post("/api/reservations")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(reservationRequest))
                .andExpect(status().isCreated());

        Reservation reservation = reservationRepository.findByDriver(savedDriver).stream()
                .findFirst().orElse(null);
        assertThat(reservation).isNotNull();

        String paymentRequest = """
                {
                    "driverId": %d,
                    "reservationId": %d,
                    "amount": 25000,
                    "method": "ewallet",
                    "currency": "VND"
                }
                """.formatted(savedDriver.getDriverId(), reservation.getReservationId());

        mockMvc.perform(post("/api/payments")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(paymentRequest))
                .andExpect(status().isCreated());

        Payment payment = paymentRepository.findByDriver(savedDriver).stream()
                .findFirst().orElse(null);
        assertThat(payment).isNotNull();
        assertThat(payment.getStatus()).isEqualTo("succeed");

        // Step 2: H·ªßy l·ªãch
        mockMvc.perform(put("/api/reservations/{id}/cancel", reservation.getReservationId()))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.status").value("canceled"));

        // Step 3: Y√™u c·∫ßu ho√†n ti·ªÅn
        String refundRequest = """
                {
                    "paymentId": %d,
                    "reason": "H·ªßy l·ªãch v√¨ l√Ω do c√° nh√¢n"
                }
                """.formatted(payment.getPaymentId());

        mockMvc.perform(post("/api/payments/{id}/refund", payment.getPaymentId())
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(refundRequest))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.status").value("refunded"));

        // Verify refund
        Payment refundedPayment = paymentRepository.findById(payment.getPaymentId()).orElse(null);
        assertThat(refundedPayment).isNotNull();
        assertThat(refundedPayment.getStatus()).isEqualTo("refunded");

        System.out.println("‚úÖ Driver successfully cancelled and received refund");
    }

    /**
     * Scenario 5: T√†i x·∫ø s·ª≠ d·ª•ng d·ªãch v·ª• trong gi·ªù cao ƒëi·ªÉm
     * - T√¨m tr·∫°m c√≥ s·∫µn pin
     * - ƒê·∫∑t l·ªãch trong th·ªùi gian b·∫≠n
     * - Ch·ªù ƒë·ª£i v√† ki√™n nh·∫´n
     * - Ho√†n th√†nh giao d·ªãch
     */
    @Test
    void scenario_DriverPeakHourUsage() throws Exception {
        System.out.println("‚è∞ Scenario: Driver Peak Hour Usage");

        // Setup: T·∫°o nhi·ªÅu tr·∫°m v√† pin ƒë·ªÉ m√¥ ph·ªèng gi·ªù cao ƒëi·ªÉm
        Driver driver = Driver.builder()
                .email("peak@example.com")
                .passwordHash("encoded_password")
                .fullName("T√†i X·∫ø Gi·ªù Cao ƒêi·ªÉm")
                .phone("0123456789")
                .emailVerified(true)
                .createdAt(Instant.now())
                .build();
        Driver savedDriver = driverRepository.save(driver);

        // T·∫°o nhi·ªÅu tr·∫°m
        for (int i = 1; i <= 3; i++) {
            Station station = Station.builder()
                    .name("Peak Station " + i)
                    .address("123 Peak Street " + i + ", District 1, HCMC")
                    .latitude(new BigDecimal("10.7769").add(new BigDecimal(i * 0.01)))
                    .longitude(new BigDecimal("106.7009").add(new BigDecimal(i * 0.01)))
                    .status("active")
                    .build();
            Station savedStation = stationRepository.save(station);

            // T·∫°o pin cho m·ªói tr·∫°m (m√¥ ph·ªèng t√¨nh tr·∫°ng kh√°c nhau)
            String[] states = {"full", "charging", "maintenance"};
            for (int j = 0; j < 3; j++) {
                Battery battery = Battery.builder()
                        .station(savedStation)
                        .model("VinFast VF8 Battery")
                        .state(states[j])
                        .sohPercent(95 - j * 2)
                        .socPercent(j == 0 ? 100 : 75)
                        .build();
                batteryRepository.save(battery);
            }
        }

        // Step 1: T√¨m tr·∫°m c√≥ pin s·∫µn s√†ng
        mockMvc.perform(get("/api/stations/nearby")
                        .param("latitude", "10.7800")
                        .param("longitude", "106.7200")
                        .param("radius", "5"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$").isArray());

        // Step 2: Ki·ªÉm tra t√¨nh tr·∫°ng pin t·∫°i tr·∫°m
        Station selectedStation = stationRepository.findAll().get(0);
        mockMvc.perform(get("/api/stations/{id}/batteries", selectedStation.getStationId()))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$").isArray());

        // Step 3: ƒê·∫∑t l·ªãch (c√≥ th·ªÉ ph·∫£i ch·ªù)
        String reservationRequest = """
                {
                    "driverId": %d,
                    "stationId": %d,
                    "reservedStart": "2024-12-31T18:00:00Z"
                }
                """.formatted(savedDriver.getDriverId(), selectedStation.getStationId());

        mockMvc.perform(post("/api/reservations")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(reservationRequest))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.status").value("pending"));

        // Step 4: Thanh to√°n v√† ch·ªù x√°c nh·∫≠n
        Reservation reservation = reservationRepository.findByDriver(savedDriver).stream()
                .findFirst().orElse(null);
        assertThat(reservation).isNotNull();

        String paymentRequest = """
                {
                    "driverId": %d,
                    "reservationId": %d,
                    "amount": 25000,
                    "method": "ewallet",
                    "currency": "VND"
                }
                """.formatted(savedDriver.getDriverId(), reservation.getReservationId());

        mockMvc.perform(post("/api/payments")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(paymentRequest))
                .andExpect(status().isCreated());

        // Step 5: Ch·ªù v√† ki·ªÉm tra tr·∫°ng th√°i l·ªãch ƒë·∫∑t
        // Simulate waiting and checking status
        mockMvc.perform(get("/api/reservations/{id}", reservation.getReservationId()))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.status").exists());

        System.out.println("‚úÖ Driver successfully handled peak hour usage scenario");
    }
}
