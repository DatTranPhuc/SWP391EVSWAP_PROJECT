package evswap.swp391to4.service;

import evswap.swp391to4.dto.StaffCreateRequest;
import evswap.swp391to4.dto.StaffResponse;
import evswap.swp391to4.dto.StaffUpdateRequest;
import evswap.swp391to4.entity.Staff;
import evswap.swp391to4.entity.Station;
import evswap.swp391to4.repository.StaffRepository;
import evswap.swp391to4.repository.StationRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList; // Import cho 'new ArrayList<>()'
import java.util.List;
// import java.util.stream.Collectors; // Kh√¥ng c·∫ßn n·ªØa v√¨ d√πng 'for'

/**
 * L·ªõp Service (B·ªô n√£o üß†)
 * Phi√™n b·∫£n n√†y D√ôNG H√ÄM HELPER v√† V√íNG L·∫∂P FOR
 */
@Service
@RequiredArgsConstructor
public class StaffService {

    private final StaffRepository staffRepo;
    private final StationRepository stationRepo;
    private final PasswordEncoder passwordEncoder;

    /**
     * CH·ª®C NƒÇNG 1: L·∫•y danh s√°ch nh√¢n vi√™n (c√≥ t√¨m ki·∫øm)
     * (S·ª≠ d·ª•ng v√≤ng l·∫∑p 'for' cho d·ªÖ hi·ªÉu)
     */
    @Transactional(readOnly = true)
    public List<StaffResponse> getAllStaff(String searchName) {
        List<Staff> staffList;
        if (searchName == null || searchName.isBlank()) {
            staffList = staffRepo.findAll();
        } else {
            staffList = staffRepo.findByFullNameContainingIgnoreCase(searchName);
        }

        // === S·ª¨A L·∫†I (D√πng v√≤ng l·∫∑p 'for') ===
        List<StaffResponse> responseList = new ArrayList<>();
        for (Staff staff : staffList) {
            // G·ªçi helper cho t·ª´ng 'staff' v√† th√™m v√†o list m·ªõi
            responseList.add(mapToStaffResponse(staff));
        }
        return responseList;
    }

    /**
     * CH·ª®C NƒÇNG 2: T·∫°o nh√¢n vi√™n m·ªõi
     * (ƒê√É C·∫¨P NH·∫¨T: B·∫Øt bu·ªôc ph·∫£i c√≥ Station ID)
     */
    @Transactional
    public StaffResponse createStaff(StaffCreateRequest req) {
        if (staffRepo.existsByEmail(req.getEmail())) {
            throw new IllegalStateException("Email ƒë√£ t·ªìn t·∫°i");
        }

        // === LOGIC C≈® (B·ªã x√≥a) ===
        // Station station = null;
        // if (req.getStationId() != null) { ... }

        // === LOGIC M·ªöI ===
        // V√¨ stationId l√† b·∫Øt bu·ªôc, ta t√¨m lu√¥n
        Station station = stationRepo.findById(req.getStationId())
                .orElseThrow(() -> new IllegalArgumentException("Station kh√¥ng t·ªìn t·∫°i"));

        // Ki·ªÉm tra tr·∫°m c√≥ active kh√¥ng
        if (!"active".equalsIgnoreCase(station.getStatus())) {
            throw new IllegalArgumentException("Tr·∫°m n√†y ƒëang kh√¥ng ho·∫°t ƒë·ªông (kh√¥ng active)");
        }

        // (Ph·∫ßn x·ª≠ l√Ω password gi·ªØ nguy√™n)
        String rawPassword = req.getPassword();
        if (rawPassword == null || rawPassword.isBlank()) {
            rawPassword = java.util.UUID.randomUUID().toString().substring(0, 8);
        }

        // (Ph·∫ßn build v√† save gi·ªØ nguy√™n)
        Staff staff = Staff.builder()
                .email(req.getEmail())
                .fullName(req.getFullName())
                .passwordHash(passwordEncoder.encode(rawPassword))
                .isActive(true)
                .station(station) // <-- station gi·ªù s·∫Ω kh√¥ng bao gi·ªù null
                .build();

        Staff saved = staffRepo.save(staff);

        return mapToStaffResponse(saved);
    }

    /**
     * CH·ª®C NƒÇNG 3: L·∫•y th√¥ng tin chi ti·∫øt 1 staff ƒë·ªÉ s·ª≠a
     */
    @Transactional(readOnly = true)
    public StaffUpdateRequest getStaffDetails(Integer id) {
        Staff staff = staffRepo.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n"));

        // (H√†m n√†y tr·∫£ v·ªÅ DTO kh√°c (StaffUpdateRequest) n√™n kh√¥ng d√πng helper)
        return StaffUpdateRequest.builder()
                .staffId(staff.getStaffId())
                .fullName(staff.getFullName())
                .email(staff.getEmail())
                .isActive(staff.getIsActive())
                .stationId(staff.getStation() != null ? staff.getStation().getStationId() : null)
                .build();
    }

    /**
     * CH·ª®C NƒÇNG 4: C·∫≠p nh·∫≠t th√¥ng tin staff
     */
    @Transactional
    public StaffResponse updateStaff(Integer id, StaffUpdateRequest req) {
        Staff staff = staffRepo.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n"));

        if (!staff.getEmail().equals(req.getEmail()) && staffRepo.existsByEmail(req.getEmail())) {
            throw new IllegalStateException("Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi t√†i kho·∫£n kh√°c");
        }
        Station station = null;
        if (req.getStationId() != null) {
            station = stationRepo.findById(req.getStationId())
                    .orElseThrow(() -> new IllegalArgumentException("Station kh√¥ng t·ªìn t·∫°i"));
        }

        staff.setFullName(req.getFullName());
        staff.setEmail(req.getEmail());
        staff.setIsActive(req.getIsActive());
        staff.setStation(station);

        Staff updated = staffRepo.save(staff);

        // G·ªçi helper
        return mapToStaffResponse(updated);
    }

    /**
     * CH·ª®C NƒÇNG 5: X√≥a nh√¢n vi√™n
     */
    @Transactional
    public void deleteStaff(Integer id) {
        if (!staffRepo.existsById(id)) {
            throw new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n ƒë·ªÉ x√≥a");
        }
        staffRepo.deleteById(id);
    }

    /**
     * CH·ª®C NƒÇNG 6: ƒêƒÉng nh·∫≠p cho Staff
     */
    @Transactional(readOnly = true)
    public Staff login(String email, String password) {
        // 1. T√¨m staff b·∫±ng email
        Staff staff = staffRepo.findByEmail(email)
                .orElseThrow(() -> new IllegalArgumentException("Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng"));

        // 2. Ki·ªÉm tra m·∫≠t kh·∫©u
        if (!passwordEncoder.matches(password, staff.getPasswordHash())) {
            throw new IllegalArgumentException("Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng");
        }

        // 3. Ki·ªÉm tra t√†i kho·∫£n c√≥ b·ªã kh√≥a kh√¥ng
        if (!staff.getIsActive()) {
            throw new IllegalStateException("T√†i kho·∫£n n√†y ƒë√£ b·ªã qu·∫£n tr·ªã vi√™n v√¥ hi·ªáu h√≥a");
        }

        // 4. S·ª¨A L·ªñI 500:
        // Ch·ªß ƒë·ªông "ƒë√°nh th·ª©c" Station TR∆Ø·ªöC KHI transaction k·∫øt th√∫c
        staff.getStation().getName(); // <-- TH√äM D√íNG N√ÄY

        // 5. ƒêƒÉng nh·∫≠p th√†nh c√¥ng, tr·∫£ v·ªÅ Entity
        return staff;
    }

    /**
     * H√ÄM HELPER (PRIVATE) üì¶
     * "ƒê√≥ng g√≥i" Staff (Entity) th√†nh StaffResponse (DTO).
     */
    private StaffResponse mapToStaffResponse(Staff staff) {
        return StaffResponse.builder()
                .staffId(staff.getStaffId())
                .email(staff.getEmail())
                .fullName(staff.getFullName())
                .isActive(staff.getIsActive())
                .stationId(staff.getStation() != null ? staff.getStation().getStationId() : null)
                .build();
    }
}