package evswap.swp391to4.service;

import evswap.swp391to4.dto.StaffCreateRequest;
import evswap.swp391to4.dto.StaffResponse;
import evswap.swp391to4.entity.Staff;
import evswap.swp391to4.entity.Station;
import evswap.swp391to4.repository.StaffRepository;
import evswap.swp391to4.repository.StationRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

/**
 * L·ªõp Service (B·ªô n√£o üß†)
 * Phi√™n b·∫£n n√†y KH√îNG D√ôNG H√ÄM HELPER (theo y√™u c·∫ßu)
 * D·∫´n ƒë·∫øn vi·ªác code b·ªã l·∫∑p l·∫°i ·ªü 2 ch·ªó.
 */
@Service
@RequiredArgsConstructor
public class StaffService {

    private final StaffRepository staffRepo;
    private final StationRepository stationRepo;
    private final PasswordEncoder passwordEncoder;

    /**
     * CH·ª®C NƒÇNG 1: L·∫•y danh s√°ch nh√¢n vi√™n (c√≥ t√¨m ki·∫øm)
     */
    @Transactional(readOnly = true)
    public List<StaffResponse> getAllStaff(String searchName) {

        // 1. L·∫•y "H√†ng th√¥" (List<Staff>) t·ª´ Kho (Repository)
        List<Staff> staffList;
        if (searchName == null || searchName.isBlank()) {
            staffList = staffRepo.findAll();
        } else {
            staffList = staffRepo.findByFullNameContainingIgnoreCase(searchName);
        }

        // 2. T·∫°o List r·ªóng ƒë·ªÉ ch·ª©a DTO
        List<StaffResponse> responseList = new ArrayList<>();

        // 3. L·∫∑p qua "H√†ng th√¥"
        for (Staff staff : staffList) {

            // 4. "ƒê√≥ng g√≥i" DTO (L·∫∂P L·∫†I CODE L·∫¶N 1)
            // B·∫†N PH·∫¢I VI·∫æT CODE "ƒê√ìNG G√ìI" NGAY T·∫†I ƒê√ÇY
            StaffResponse dto = StaffResponse.builder()
                    .staffId(staff.getStaffId())
                    .email(staff.getEmail())
                    .fullName(staff.getFullName())
                    .isActive(staff.getIsActive())
                    .stationId(staff.getStation() != null ? staff.getStation().getStationId() : null)
                    .build();

            // 5. Th√™m DTO ƒë√£ ƒë√≥ng g√≥i v√†o list
            responseList.add(dto);
        }

        // 6. Tr·∫£ v·ªÅ List DTO
        return responseList;
    }

    /**
     * CH·ª®C NƒÇNG 2: T·∫°o nh√¢n vi√™n m·ªõi
     */
    @Transactional
    public StaffResponse createStaff(StaffCreateRequest req) {

        // (T·∫•t c·∫£ logic ki·ªÉm tra v√† t·∫°o Staff gi·ªØ nguy√™n)
        if (staffRepo.existsByEmail(req.getEmail())) {
            throw new IllegalStateException("Email ƒë√£ t·ªìn t·∫°i");
        }
        Station station = null;
        if (req.getStationId() != null) {
            station = stationRepo.findById(req.getStationId())
                    .orElseThrow(() -> new IllegalArgumentException("Station kh√¥ng t·ªìn t·∫°i"));

            if (!"active".equalsIgnoreCase(station.getStatus())) {
                throw new IllegalArgumentException("Station kh√¥ng active");
            }
        }
        String rawPassword = req.getPassword();
        if (rawPassword == null || rawPassword.isBlank()) {
            rawPassword = java.util.UUID.randomUUID().toString().substring(0, 8);
        }
        Staff staff = Staff.builder()
                .email(req.getEmail())
                .fullName(req.getFullName())
                .passwordHash(passwordEncoder.encode(rawPassword))
                .isActive(true)
                .station(station)
                .build();

        Staff saved = staffRepo.save(staff);

        // "ƒê√≥ng g√≥i" DTO (L·∫∂P L·∫†I CODE L·∫¶N 2)
        // B·∫†N PH·∫¢I VI·∫æT L·∫†I CODE "ƒê√ìNG G√ìI" NGAY T·∫†I ƒê√ÇY
        return StaffResponse.builder()
                .staffId(saved.getStaffId())
                .email(saved.getEmail())
                .fullName(saved.getFullName())
                .isActive(saved.getIsActive())
                .stationId(saved.getStation() != null ? saved.getStation().getStationId() : null)
                .build();
    }

    // KH√îNG C√ì H√ÄM HELPER 'mapToStaffResponse' ·ªû ƒê√ÇY
}