package evswap.swp391to4.service;

import evswap.swp391to4.dto.StationCreateRequest;
import evswap.swp391to4.dto.StationResponse;
import evswap.swp391to4.entity.Station;
import evswap.swp391to4.repository.StationRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class StationService {

    private final StationRepository stationRepo;

    /**
     * 1. CREATE ‚ûï: T·∫°o m·ªôt tr·∫°m pin m·ªõi
     */
    @Transactional
    public StationResponse createStation(StationCreateRequest req) {
        if (stationRepo.findByNameIgnoreCase(req.getName()).isPresent()) {
            throw new IllegalStateException("T√™n tr·∫°m '" + req.getName() + "' ƒë√£ t·ªìn t·∫°i.");
        }

        Station station = Station.builder()
                .name(req.getName())
                .address(req.getAddress())
                .latitude(req.getLatitude())
                .longitude(req.getLongitude())
                .status(req.getStatus() != null ? req.getStatus() : "OPERATIONAL") // M·∫∑c ƒë·ªãnh l√† ƒëang ho·∫°t ƒë·ªông
                .build();

        Station savedStation = stationRepo.save(station);
        return toResponse(savedStation);
    }

    /**
     * 2. READ üìñ: L·∫•y danh s√°ch t·∫•t c·∫£ c√°c tr·∫°m
     */
    @Transactional(readOnly = true)
    public List<StationResponse> getAllStations() {
        return stationRepo.findAll().stream()
                .map(this::toResponse)
                .collect(Collectors.toList());
    }

    /**
     * 3. READ BY ID üÜî: L·∫•y th√¥ng tin m·ªôt tr·∫°m theo ID
     */
    @Transactional(readOnly = true)
    public StationResponse getStationById(Integer id) {
        return stationRepo.findById(id)
                .map(this::toResponse)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y tr·∫°m v·ªõi ID: " + id));
    }

    /**
     * 4. UPDATE ‚úèÔ∏è: C·∫≠p nh·∫≠t th√¥ng tin c·ªßa m·ªôt tr·∫°m
     */
    @Transactional
    public StationResponse updateStation(Integer id, StationCreateRequest req) {
        Station stationToUpdate = stationRepo.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y tr·∫°m v·ªõi ID: " + id));

        // C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng th√¥ng tin
        stationToUpdate.setName(req.getName());
        stationToUpdate.setAddress(req.getAddress());
        stationToUpdate.setLatitude(req.getLatitude());
        stationToUpdate.setLongitude(req.getLongitude());
        if (req.getStatus() != null) {
            stationToUpdate.setStatus(req.getStatus());
        }

        Station updatedStation = stationRepo.save(stationToUpdate);
        return toResponse(updatedStation);
    }

    /**
     * 5. DELETE üóëÔ∏è: X√≥a m·ªôt tr·∫°m
     */
    @Transactional
    public void deleteStation(Integer id) {
        if (!stationRepo.existsById(id)) {
            throw new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y tr·∫°m v·ªõi ID: " + id);
        }
        stationRepo.deleteById(id);
    }

    /**
     * üîé T√¨m tr·∫°m theo t√™n (n·∫øu kh√¥ng nh·∫≠p ‚Üí tr·∫£ t·∫•t c·∫£)
     */
    public List<StationResponse> searchByName(String name) {
        if (name == null || name.trim().isEmpty()) {
            return getAllStations();
        }
        return stationRepo.findByNameContainingIgnoreCase(name).stream()
                .map(this::toResponse)
                .collect(Collectors.toList());
    }

    /**
     * üìç T√¨m tr·∫°m g·∫ßn v·ªã tr√≠ (theo b√°n k√≠nh km)
     */
    public List<StationResponse> findNearby(BigDecimal lat, BigDecimal lng, double radiusKm) {
        // L∆∞u √Ω: C√°ch l√†m n√†y s·∫Ω ch·∫≠m n·∫øu c√≥ nhi·ªÅu tr·∫°m.
        // Gi·∫£i ph√°p t·ªëi ∆∞u h∆°n l√† d√πng Spatial Query c·ªßa database.
        return stationRepo.findAll().stream()
                .filter(s -> {
                    if (s.getLatitude() == null || s.getLongitude() == null) return false;
                    double distance = distanceInKm(
                            lat.doubleValue(), lng.doubleValue(),
                            s.getLatitude().doubleValue(), s.getLongitude().doubleValue()
                    );
                    return distance <= radiusKm;
                })
                .map(this::toResponse)
                .collect(Collectors.toList());
    }

    /**
     * üìè C√¥ng th·ª©c Haversine t√≠nh kho·∫£ng c√°ch gi·ªØa 2 t·ªça ƒë·ªô
     */
    private double distanceInKm(double lat1, double lon1, double lat2, double lon2) {
        double R = 6371; // B√°n k√≠nh Tr√°i ƒë·∫•t (km)
        double dLat = Math.toRadians(lat2 - lat1);
        double dLon = Math.toRadians(lon2 - lon1);
        double a = Math.sin(dLat / 2) * Math.sin(dLat / 2)
                + Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2))
                * Math.sin(dLon / 2) * Math.sin(dLon / 2);
        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c;
    }

    /**
     * üîÑ HELPER: Chuy·ªÉn ƒë·ªïi t·ª´ Entity sang DTO Response
     */
    private StationResponse toResponse(Station station) {
        return StationResponse.builder()
                .stationId(station.getStationId())
                .name(station.getName())
                .address(station.getAddress())
                .latitude(station.getLatitude())
                .longitude(station.getLongitude())
                .status(station.getStatus() != null ? station.getStatus().toUpperCase() : "UNKNOWN")
                .build();
    }
}