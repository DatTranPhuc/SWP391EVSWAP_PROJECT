package evswap.swp391to4.controller;

import evswap.swp391to4.dto.StaffCreateRequest;
import evswap.swp391to4.dto.StaffResponse;
import evswap.swp391to4.dto.StationCreateRequest;
import evswap.swp391to4.dto.StationResponse;
import evswap.swp391to4.service.StaffService;
import evswap.swp391to4.service.StationService;
import jakarta.validation.Valid; // Import cho @Valid
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult; // Import ƒë·ªÉ h·ª©ng l·ªói
import org.springframework.validation.FieldError; // Import ƒë·ªÉ l·∫•y th√¥ng tin l·ªói
import org.springframework.web.bind.annotation.*;

import java.util.List; // Import cho List

/**
 * L·ªõp Controller (Ng∆∞·ªùi Ph·ª•c V·ª• üßë‚Äç‚úàÔ∏è)
 * "B·∫Øt" t·∫•t c·∫£ c√°c URL b·∫Øt ƒë·∫ßu b·∫±ng /admin
 * v√† ra l·ªánh cho c√°c Service (B·ªô n√£o) t∆∞∆°ng ·ª©ng.
 */
@Controller
@RequestMapping("/admin") // T·∫•t c·∫£ URL trong file n√†y ƒë·ªÅu b·∫Øt ƒë·∫ßu b·∫±ng /admin
@RequiredArgsConstructor
public class AdminController {

    // Controller "ra l·ªánh" cho 2 Service n√†y
    private final StaffService staffService;
    private final StationService stationService;

    // ====================== VIEW DASHBOARD ======================
    /**
     * Hi·ªÉn th·ªã trang Dashboard ch√≠nh c·ªßa Admin.
     * B·∫Øt URL: GET /admin/dashboard
     */
    @GetMapping("/dashboard")
    public String dashboard() {
        return "admin/dashboard"; // Tr·∫£ v·ªÅ file admin/dashboard.html
    }

    // ====================== STAFF ======================

    /**
     * CH·ª®C NƒÇNG M·ªöI: X·ª≠ l√Ω xem danh s√°ch V√Ä t√¨m ki·∫øm nh√¢n vi√™n.
     * B·∫Øt URL: GET /admin/staff
     * (ho·∫∑c GET /admin/staff?search=t√™n_c·∫ßn_t√¨m)
     */
    @GetMapping("/staff")
    public String listStaff(@RequestParam(value = "search", required = false) String search, Model model) {

        // 1. Ra l·ªánh cho Service: "L·∫•y danh s√°ch nh√¢n vi√™n (c√≥ t√¨m ki·∫øm)"
        List<StaffResponse> staffList = staffService.getAllStaff(search);

        // 2. B·ªè danh s√°ch v√†o "t√∫i" (Model) ƒë·ªÉ g·ª≠i cho HTML
        model.addAttribute("staffList", staffList);
        // 3. B·ªè t·ª´ kh√≥a t√¨m ki·∫øm v√†o "t√∫i" (ƒë·ªÉ hi·ªÉn th·ªã l·∫°i tr√™n √¥ search)
        model.addAttribute("search", search);

        // 4. Tr·∫£ v·ªÅ file admin/list-staff.html
        return "admin/list-staff";
    }

    /**
     * Hi·ªÉn th·ªã form "Th√™m nh√¢n vi√™n".
     * B·∫Øt URL: GET /admin/staff/add
     */
    @GetMapping("/staff/add")
    public String addStaffForm(Model model) {
        // ƒê∆∞a 1 ƒë·ªëi t∆∞·ª£ng r·ªóng ra form
        model.addAttribute("staff", new StaffCreateRequest());
        return "admin/add-staff"; // Tr·∫£ v·ªÅ file admin/add-staff.html
    }

    /**
     * CH·ª®C NƒÇNG C·∫¨P NH·∫¨T: X·ª≠ l√Ω khi b·∫•m n√∫t "Submit" tr√™n form th√™m Staff.
     * ƒê√£ th√™m @Valid v√† BindingResult ƒë·ªÉ ki·ªÉm tra l·ªói.
     * B·∫Øt URL: POST /admin/staff/add
     */
    @PostMapping("/staff/add")
    public String addStaffSubmit(
            @Valid @ModelAttribute("staff") StaffCreateRequest staff, // B·∫≠t @Valid
            BindingResult bindingResult, // H·ª©ng l·ªói (n·∫øu c√≥)
            Model model
    ) {

        // 1. KI·ªÇM TRA L·ªñI VALIDATION TR∆Ø·ªöC (l·ªói @NotBlank, @Email...)
        if (bindingResult.hasErrors()) {
            // N·∫øu c√≥ l·ªói -> G·ª≠i l·ªói v·ªÅ l·∫°i form HTML
            for (FieldError error : bindingResult.getFieldErrors()) {
                model.addAttribute(error.getField() + "Error", error.getDefaultMessage());
            }
            model.addAttribute("staff", staff); // Gi·ªØ l·∫°i d·ªØ li·ªáu ng∆∞·ªùi d√πng ƒë√£ g√µ
            return "admin/add-staff"; // Tr·∫£ v·ªÅ l·∫°i trang form, KH√îNG g·ªçi Service
        }

        // 2. N·∫æU KH√îNG C√ì L·ªñI VALIDATION -> M·ªöI G·ªåI SERVICE
        try {
            // Ra l·ªánh cho Service: "T·∫°o nh√¢n vi√™n m·ªõi"
            staffService.createStaff(staff);
            model.addAttribute("success", "T·∫°o nh√¢n vi√™n th√†nh c√¥ng!");
            model.addAttribute("staff", new StaffCreateRequest()); // X√≥a form
        } catch (Exception e) {
            // ƒê√¢y l√† l·ªói t·ª´ Service (v√≠ d·ª•: "Email ƒë√£ t·ªìn t·∫°i")
            model.addAttribute("error", e.getMessage());
            model.addAttribute("staff", staff); // Gi·ªØ l·∫°i d·ªØ li·ªáu
        }

        return "admin/add-staff"; // Tr·∫£ v·ªÅ l·∫°i trang form (ƒë·ªÉ hi·ªÉn th·ªã success/error)
    }

    // ====================== STATION ======================

    @GetMapping("/station")
    public String listStations(@RequestParam(value = "search", required = false) String search, Model model) {

        List<StationResponse> stationList;

        // Logic t√¨m ki·∫øm (d√πng c√°c h√†m b·∫°n ƒë√£ c√≥)
        if (search == null || search.isBlank()) {
            // N·∫øu kh√¥ng t√¨m -> L·∫•y t·∫•t c·∫£
            stationList = stationService.getAllStations();
        } else {
            // N·∫øu c√≥ t√¨m -> G·ªçi h√†m searchByName
            stationList = stationService.searchByName(search);
        }

        model.addAttribute("stationList", stationList);
        model.addAttribute("search", search);

        return "admin/list-station"; // Tr·∫£ v·ªÅ file admin/list-station.html
    }

    /**
     * Hi·ªÉn th·ªã form "Th√™m tr·∫°m".
     * B·∫Øt URL: GET /admin/station/add
     */
    @GetMapping("/station/add")
    public String addStationForm(Model model) {
        model.addAttribute("station", new StationCreateRequest());
        return "admin/add-station";
    }

    /**
     * CH·ª®C NƒÇNG C·∫¨P NH·∫¨T: X·ª≠ l√Ω khi b·∫•m n√∫t "Submit" tr√™n form th√™m Station.
     * ƒê√£ th√™m @Valid v√† BindingResult ƒë·ªÉ ki·ªÉm tra l·ªói.
     * B·∫Øt URL: POST /admin/station/add
     */
    @PostMapping("/station/add")
    public String addStationSubmit(
            @Valid @ModelAttribute("station") StationCreateRequest station, // B·∫≠t @Valid
            BindingResult bindingResult, // H·ª©ng l·ªói
            Model model
    ) {

        // 1. KI·ªÇM TRA L·ªñI VALIDATION TR∆Ø·ªöC (t√™n tr·ªëng, t·ªça ƒë·ªô sai...)
        if (bindingResult.hasErrors()) {
            // N·∫øu c√≥ l·ªói -> G·ª≠i l·ªói v·ªÅ l·∫°i form HTML
            for (FieldError error : bindingResult.getFieldErrors()) {
                model.addAttribute(error.getField() + "Error", error.getDefaultMessage());
            }
            model.addAttribute("station", station); // Gi·ªØ l·∫°i d·ªØ li·ªáu ƒë√£ g√µ
            return "admin/add-station"; // Tr·∫£ v·ªÅ l·∫°i trang form, KH√îNG g·ªçi Service
        }

        // 2. N·∫æU KH√îNG C√ì L·ªñI -> M·ªöI G·ªåI SERVICE
        try {
            stationService.createStation(station);
            model.addAttribute("success", "T·∫°o tr·∫°m th√†nh c√¥ng!");
            model.addAttribute("station", new StationCreateRequest()); // X√≥a form
        } catch (Exception e) {
            // L·ªói t·ª´ Service (v√≠ d·ª•: t√™n tr·∫°m ƒë√£ t·ªìn t·∫°i)
            model.addAttribute("error", e.getMessage());
            model.addAttribute("station", station); // Gi·ªØ l·∫°i d·ªØ li·ªáu
        }

        return "admin/add-station"; // Tr·∫£ v·ªÅ l·∫°i trang form (ƒë·ªÉ hi·ªÉn th·ªã success/error)
    }
}